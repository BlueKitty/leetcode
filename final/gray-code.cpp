/* ith gray code can be generated by i ^ (i >> 1), which needs proof by induction and not
 * trivial at all. */
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> result;
        int total_numbers = 1 << n;
        for (int i = 0; i < total_numbers; i++)
            result.push_back(i ^ (i >> 1));
        return result;
    }
};

/* Reflect and append, instead of using pow() in Pumbaa's solution, it uses bitwise
 * operation.
 */
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> result = { 0 };
        for (int i = 0; i < n; ++i) {
            for (int j = result.size() - 1; j >= 0; --j) {
                result.push_back(result[j] | 1 << i);
            }
        }
        return result;
    }
};